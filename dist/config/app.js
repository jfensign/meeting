// Generated by CoffeeScript 1.10.0
(function() {
  var AppConfig, MongoStore, bodyParser, config, cookieParser, createDomain, expressVal, passport, passportIO, session, validator;

  session = require('express-session');

  MongoStore = require('connect-mongo')(session);

  expressVal = require('express-validator');

  cookieParser = require('cookie-parser');

  createDomain = require('domain').create;

  validator = require('validator');

  bodyParser = require('body-parser');

  passport = require('passport');

  passportIO = require('passport.socketio');

  config = require('./');

  AppConfig = (function() {
    function AppConfig(port, api_version, web_concurrency) {
      if (port == null) {
        port = 3000;
      }
      if (api_version == null) {
        api_version = "1";
      }
      if (web_concurrency == null) {
        web_concurrency = 1;
      }
      this.port = port;
      this.api_version = api_version;
      this.web_concurrency = web_concurrency;
      this.app = null;
    }

    AppConfig.prototype.resources = ['login', 'logout', 'standups', 'moods', 'notifications', 'actionitems', 'users', 'participants', 'timezones', 'durations'];

    AppConfig.prototype.config_digest = function(app, io) {
      var session_store;
      session_store = new MongoStore({
        url: config.db.endpoint
      });
      app.use(bodyParser.urlencoded({
        extended: false
      }));
      app.use(bodyParser.json());
      app.use(expressVal(config.validator));
      app.use(cookieParser(config.auth.secret));
      app.use(session({
        resave: true,
        saveUninitialized: true,
        secret: config.auth.secret,
        store: session_store
      }));
      app.use(passport.initialize());
      app.use(passport.session());
      app.use(function(req, res, next) {
        var domain;
        domain = createDomain();
        domain.add(req);
        domain.add(res);
        domain.run(function() {
          return next();
        });
        return domain.on('error', function(e) {
          return next(e);
        });
      });
      io.use(passportIO.authorize({
        secret: config.auth.secret,
        store: session_store,
        success: function(data, accept) {
          return accept();
        },
        fail: function(data, message, error, accept) {
          return accept(error);
        }
      }));
      passport.serializeUser(function(user, done) {
        return done(null, user);
      });
      passport.deserializeUser(function(user, done) {
        return done(null, user);
      });
      return app;
    };

    AppConfig.prototype._404 = function(route) {
      return route.all('*', function(req, res) {
        return res.status(404).json({
          message: "Not found.",
          status: 404
        });
      });
    };

    AppConfig.prototype._405 = function(route) {
      return route.all('*', function(req, res) {
        return res.status(405).json({
          message: "Method not allowed.",
          status: 405
        });
      });
    };

    return AppConfig;

  })();

  module.exports = new AppConfig(process.env.PORT, process.env.API_VERSION, process.env.WEB_CONCURRENCY);

}).call(this);
