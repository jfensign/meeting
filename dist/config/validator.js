// Generated by CoffeeScript 1.10.0
(function() {
  var Validator, models, validator;

  validator = require('validator');

  models = require('../models');

  Validator = (function() {
    var moods;

    function Validator() {}

    moods = {
      post: function(req, res, next) {
        errors;
        var errors;
        req.checkBody({
          standUpId: {
            notEmpty: true
          },
          mood: {
            notEmpty: true,
            isInt: {
              min: 0,
              max: 4
            }
          }
        });
        errors = req.validationErrors();
        if (errors) {
          return res.status(400).json({
            status: 400,
            message: errors
          });
        }
        req.body = _.extend(_.pick(req.body, 'standUpId', 'mood'), _.pick(req.user, 'userId'));
        return next();
      },
      get: function(req, res, next) {
        return errors;
      }
    };

    return Validator;

  })();

  module.exports = {
    customValidators: {
      isArray: function(value) {
        return Array.isArray(value);
      },
      isBool: function(value) {
        if (!value) {
          return true;
        }
        return value.toLowerCase() === 'true' || value.toLowerCase() === 'false';
      },
      isMongoId: function(value) {
        if (!value) {
          return true;
        }
        return value.match(/^[0-9a-fA-F]{24}$/);
      },
      isArrayOfParticipants: function(value) {
        if (value.length === 0) {
          return true;
        }
        return new Promise(function(resolve, reject) {
          console.log(value.length);
          console.log("QUERYING");
          return models.users.count({
            _id: {
              '$in': value
            }
          }, function(e, c) {
            console.log(e);
            console.log(c);
            if (e) {
              return reject(e);
            } else if (c === value.length) {
              return resolve();
            } else {
              return reject("Nonexistent participant");
            }
          });
        });
      }
    }
  };

}).call(this);
