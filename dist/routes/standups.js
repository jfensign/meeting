// Generated by CoffeeScript 1.10.0
(function() {
  var Participants, StandUps, Standup, User, _, mw;

  mw = require('../middleware');

  Participants = require('../models/participants');

  Standup = require('../models/standups');

  User = require('../models/users');

  _ = require('underscore');

  StandUps = (function() {
    var create, del, get, update;

    function StandUps(router, resource) {
      this.router = router;
      this.resource = resource;
      this.router.post("/", mw.validator.standups.post, create);
      this.router.put("/:id", mw.validator.standups.post, update);
      this.router["delete"]("/:ids", del);
      this.router.get("/", get);
      this.router.all("*", function(req, res) {
        return res.status(405).json({
          error: "Method not allowed."
        });
      });
    }

    get = function(req, res) {
      errors;
      var errors;
      req.checkQuery('userId', 'Required Query Parameter').notEmpty();
      errors = req.validationErrors();
      if (errors) {
        res.status(400).json({
          status: 400,
          message: errors
        });
        return;
      }
      return User.findById(req.query.userId, function(e, user) {
        return user.standups(function(e, standups) {
          if (e) {
            return res.status(500).json(e);
          } else {
            return res.json(standups);
          }
        });
      });
    };

    del = function(req, res) {
      var id, standup_ids;
      standup_ids = (function() {
        var i, len, ref, results;
        ref = req.params.ids.split(",");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          id = ref[i];
          results.push(id.trim());
        }
        return results;
      })();
      return Standup.deleteBatch(standup_ids, function(e) {
        if (e) {
          return res.status(500).json(e);
        }
        return res.status(200).json({});
      });
    };

    update = function(req, res) {};

    create = function(req, res) {
      var standup;
      req.body.participants.push(req.body.scrumMaster);
      standup = new Standup(req.body);
      return standup.save(function(e) {
        if (e) {
          return res.status(400).json(e);
        } else {
          return res.json(standup);
        }
      });
    };

    StandUps.prototype.get_routes = function() {
      return this.router;
    };

    return StandUps;

  })();

  module.exports = StandUps;

}).call(this);
