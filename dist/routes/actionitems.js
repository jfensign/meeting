// Generated by CoffeeScript 1.10.0
(function() {
  var ActionItem, ActionItems, _;

  ActionItem = require('../models/actionitems');

  _ = require('underscore');

  ActionItems = (function() {
    var create, del, update, validate;

    function ActionItems(router, resource) {
      this.router = router;
      this.resource = resource;
      this.router.post("/", validate, create);
      this.router.all("*", function(req, res, next) {
        return res.status(405).json({
          error: "Method not allowed"
        });
      });
    }

    validate = function(req, res, next) {
      errors;
      var errors;
      req.checkBody({
        title: {
          notEmpty: true
        },
        standUpId: {
          notEmpty: true,
          isMongoId: true
        },
        isBlocker: {
          isBool: true
        },
        resolved: {
          isBool: true
        }
      });
      req.checkBody('resolvedBy').optional().isMongoId();
      req.checkBody('resolvedOn', 'Invalid Date. If not resolved, leave blank').optional().isDate();
      errors = req.validationErrors();
      console.log("THESE BE ERRORS");
      console.log(errors);
      if (errors) {
        res.status(400).json({
          status: 400,
          message: errors
        });
        return;
      }
      req.body = _.extend(_.pick(req.body, 'title', 'standUpId', 'isBlocker', 'resolved', 'addedBy', 'resolvedBy', 'resolvedOn'), {
        addedBy: req.user.userId
      });
      return next();
    };

    del = function(req, res) {
      var id, standup_ids;
      standup_ids = (function() {
        var i, len, ref, results;
        ref = req.params.ids.split(",");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          id = ref[i];
          results.push(id.trim());
        }
        return results;
      })();
      return Standup.deleteBatch(standup_ids, function(e) {
        if (e) {
          return res.status(500).json(e);
        }
        return res.status(200).json({});
      });
    };

    update = function(req, res) {};

    create = function(req, res) {
      var actionitem;
      actionitem = new ActionItem(req.body);
      return actionitem.save(function(e, doc) {
        if (e) {
          console.error(e);
          return res.status(400).json(e);
        } else {
          return res.json(doc);
        }
      });
    };

    ActionItems.prototype.get_routes = function() {
      return this.router;
    };

    return ActionItems;

  })();

  module.exports = ActionItems;

}).call(this);
