// Generated by CoffeeScript 1.10.0
(function() {
  var Validator, _, models;

  models = require('../models');

  _ = require('underscore');

  Validator = (function() {
    function Validator() {}

    Validator.prototype.customValidators = {
      isArray: function(value) {
        return Array.isArray(value);
      },
      isBool: function(value) {
        if (!value) {
          return true;
        }
        return value.toLowerCase() === 'true' || value.toLowerCase() === 'false';
      },
      isMongoId: function(value) {
        if (!value) {
          return true;
        }
        return value.match(/^[0-9a-fA-F]{24}$/);
      },
      isArrayOfParticipants: function(value) {
        if (value.length === 0) {
          return true;
        }
        return new Promise(function(resolve, reject) {
          return models.users.count({
            _id: {
              '$in': value
            }
          }, function(e, c) {
            if (e) {
              return reject(e);
            } else if (c === value.length) {
              return resolve();
            } else {
              return reject("Nonexistent participant");
            }
          });
        });
      }
    };

    Validator.prototype.moods = {
      post: function(req, res, next) {
        errors;
        var errors;
        req.checkBody({
          standUpId: {
            notEmpty: true
          },
          mood: {
            notEmpty: true,
            isInt: {
              min: 0,
              max: 4
            }
          }
        });
        errors = req.validationErrors();
        if (errors) {
          return res.status(400).json({
            status: 400,
            message: errors
          });
        }
        req.body = _.extend(_.pick(req.body, 'standUpId', 'mood'), _.pick(req.user, 'userId'));
        return next();
      },
      get: function(req, res, next) {
        return next();
      }
    };

    Validator.prototype.standups = {
      post: function(req, res, next) {
        errors;
        var errors;
        req.checkBody({
          title: {
            notEmpty: true
          },
          projectGoals: {
            notEmpty: true
          },
          callInNumber: {
            notEmpty: true
          },
          timeZoneId: {
            notEmpty: true
          },
          startTime: {
            notEmpty: true
          },
          status: {
            notEmpty: true,
            isInt: true,
            isLength: {
              options: [0, 1]
            }
          },
          duration: {
            notEmpty: true
          }
        });
        req.checkBody('actionItems', 'Array is required').isArray();
        req.checkBody('participants', 'Array of participants is required').isArray();
        errors = req.validationErrors();
        if (errors) {
          res.status(400).json({
            status: 400,
            message: errors
          });
          return;
        }
        req.body = _.extend(_.pick(req.body, 'title', 'projectGoals', 'callInNumber', 'timeZoneId', 'startTime', 'status', 'duration', 'actionItems', 'participants'), {
          scrumMaster: req.user.userId
        });
        return next();
      }
    };

    return Validator;

  })();

  module.exports = new Validator;

}).call(this);
