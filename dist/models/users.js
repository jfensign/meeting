// Generated by CoffeeScript 1.10.0

/*
_id: int
intranetId: string // unique
name: string
avatar: string // url of avatar
 */

(function() {
  var Participant, Schema, User, UserSchema, _, async, collection, mongoose, q;

  mongoose = require('mongoose');

  q = require('q');

  Participant = require('./participants');

  _ = require('underscore');

  Schema = mongoose.Schema;

  collection = 'User';

  async = require('async');

  UserSchema = new Schema({
    intranetId: {
      type: Schema.Types.String,
      unique: true,
      required: true,
      dropDups: true,
      trim: true
    },
    name: {
      type: Schema.Types.String,
      unique: true,
      required: true,
      trim: true
    },
    avatar: {
      type: Schema.Types.String
    }
  });

  UserSchema.methods.joinStandUp = function(standUpId, cb) {
    return async.waterfall([
      (function(_this) {
        return function(_cb) {
          return _this.model('Participant').find({
            standUpId: standUpId
          }).sort('-order').exec(function(e, participants) {
            var i, is_first, len, p, participant;
            is_first = ((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = participants.length; i < len; i++) {
                p = participants[i];
                if (p.isOnline) {
                  results.push(p);
                }
              }
              return results;
            })()).length === 0;
            for (i = 0, len = participants.length; i < len; i++) {
              p = participants[i];
              if (p.userId.toString() === _this._id.toString()) {
                participant = p;
              }
            }
            participant.isOnline = true;
            participant.doneSpeaking = false;
            return participant.save(_cb);
          });
        };
      })(this), (function(_this) {
        return function(e, _cb) {
          return _this.model('StandUp').findById(standUpId, function(e, standup) {
            return standup.update_mood(_cb);
          });
        };
      })(this), cb
    ]);
  };

  UserSchema.methods.leaveStandUp = function(standUpId, cb) {
    return this.model('Participant').find({
      userId: this._id,
      standUpId: standUpId
    }).exec(function(e, participant) {
      participant.isOnline = false;
      participant.order = -1;
      return participant.save(cb);
    });
  };

  UserSchema.methods.standups = function(cb) {
    return this.model('Participant').find({
      userId: this._id
    }).populate(['userId']).exec((function(_this) {
      return function(e, docs) {
        return _this.model('StandUp').find({
          participants: {
            $in: _.pluck(docs, '_id')
          }
        }).populate(['participants', 'duration', 'scrumMaster', 'actionItems', 'participants.userId']).exec(cb);
      };
    })(this));
  };

  User = mongoose.model(collection, UserSchema);

  module.exports = User;

}).call(this);
