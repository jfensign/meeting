// Generated by CoffeeScript 1.10.0

/*
 * Require and initialize dependencies
 */

(function() {
  var Server, app, components, config, cookieParser, express, io, path, server;

  express = require('express');

  config = require('../config');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  cookieParser = require('cookie-parser');

  components = require('./');

  path = require('path');

  app.use('/static', express["static"](path.join(__dirname, '..', '..', '/public')));

  Server = (function() {
    function Server(config, routes, components) {
      this.config = config;
      this.routes = routes;
      this.components = components;
      this.handlers = {};
      return;
    }

    Server.prototype.get_app = function() {
      return app;
    };

    Server.prototype.get_server = function() {
      return server;
    };

    Server.prototype.load_route = function(resource) {
      this.handlers[resource] = new this.routes[resource](express.Router());
      return app.use("/api/v" + this.config.app.api_version + "/" + resource, function(req, res, next) {
        if (!~["login", "logout"].indexOf(resource)) {
          console.log("Check Authentication");
        } else {
          console.log("Public Page");
        }
        return next();
      }, this.handlers[resource].get_routes());
    };

    Server.prototype.run = function() {
      var i, len, ref, resource;
      this.config.app.config_digest(app, io);
      ref = this.config.app.resources;
      for (i = 0, len = ref.length; i < len; i++) {
        resource = ref[i];
        if (this.routes[resource]) {
          this.load_route(resource);
        }
      }
      this.config.app._404(app);
      io.on('connection', function(socket) {
        return socket.on('StandupUpdated', function(data) {
          if (components.socket[data.EventType]) {
            return components.socket[data.EventType](socket.request.user, data);
          }
        });
      });
      return server.listen(this.config.app.port);
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);
